#!/bin/bash
# aur-repo - manage local repositories
[[ -v AUR_DEBUG ]] && set -o xtrace
readonly argv0=repo
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

# default arguments
modifier=local
vercmp_args=()

db_namever() {
    awk '/%NAME%/ {
        getline; pkgname=$1
    } /%VERSION%/ {
        getline; printf("%s\t%s\n", pkgname, $1)
    }'
}

usage() {
    printf >&2 'usage: %s [-d repo] [-r path] [-alSu]\n' "$argv0"
    exit 1
}

source /usr/share/makepkg/util/parseopts.sh

## option parsing
opt_short='c:d:r:aluS'
opt_long=('database:' 'pacman-conf:' 'root:'
          'all' 'list' 'repo-list' 'sync' 'upgrades')
opt_hidden=('dump-options' 'status-file:')

if ! parseopts "$opt_short" "${opt_long[@]}" "${opt_hidden[@]}" -- "$@"; then
    usage
fi
set -- "${OPTRET[@]}"

unset mode db_name db_root status_file pacman_conf
while true; do
    case $1 in
        -d|--database)      shift; db_name=$1 ;;
        -r|--root)          shift; db_root=$1 ;;
        -c|--pacman-conf)   shift; pacman_conf=$1 ;;
        -a|--all)           mode=list_upgrades; vercmp_args+=(-a) ;;
        -l|--list)          mode=list_packages ;;
        -S|--sync)          modifier=sync ;;
        -u|--upgrades)      mode=list_upgrades ;;
        --repo-list)        mode=repo_list ;;
        --status-file)      shift; status_file=$1 ;;
        --dump-options)     printf -- '--%s\n' "${opt_long[@]}" ;
                            printf -- '%s' "${opt_short}" | sed 's/.:\?/-&\n/g' ;
                            exit ;;
        --) shift; break ;;
    esac
    shift
done

# assign environment variables
: "${db_name=$AUR_REPO}"
: "${db_root=$AUR_DBROOT}"

unset conf_repo server

while read -r key _ value; do
    case $key=$value in
        \[*\]*)
            section=${key:1:-1}
            ;;
        DBPath=*)
            pacman_dbpath=$value
            ;;
        Server=file://*)
            server=${value#file://}
            conf_repo+=("$server" "$section")

            case $section in
                $db_name)
                    if ! [[ $db_root ]]; then
                        db_root=$server
                    elif [[ $db_root != "$server" ]]; then
                        printf >&2 '%s: warning: --root and pacman.conf mismatch (%s)\n' "$argv0" "$db_name"
                    fi ;;
            esac
            ;;
        Server=*://*)
            case $section in
                $db_name)
                    if ! [[ $db_root ]]; then
                        db_root=$value
                    fi ;;
            esac
            ;;
    esac
done < <(pacman-conf --config "${pacman_conf:-/etc/pacman.conf}")

# exclusive modes
case $mode in
    #requires (none)
    repo_list)
        if [[ ${conf_repo[*]} ]]; then
            printf '%q/%q.db\n' "${conf_repo[@]}"
        else
            printf >&2 '%s: no file:// repository configured\n' "$argv0"
        fi
        exit 0 ;;
esac

if ! [[ $db_name ]]; then
    case ${#conf_repo[@]} in
        2) db_root=${conf_repo[0]}
           db_name=${conf_repo[1]}
           ;;
        0) printf >&2 '%s: no file:// repository found\n' "$argv0"
           exit 2
           ;;
        *) printf >&2 '%s: repository choice is ambiguous (use -d to specify)\n' "$argv0"
           printf '%q\n' "${conf_repo[@]}" | paste - - | column -t >&2
           exit 1
           ;;
    esac
fi

if [[ -v status_file ]]; then
    printf '%s\n%s\n' "$db_name" "$db_root" >"$status_file"
fi

case $modifier in
    #requires
    # - $db_root/$db_name (path)
    local)
        if ! [[ $db_root ]]; then
            printf >&2 '%s: %s: repository path not found\n' "$argv0" "$db_name"
            exit 2
        elif [[ $db_root == *://* ]]; then
            printf >&2 '%s: %s: object is remote (use -S to query)\n' "$argv0" "$db_root"
            exit 66
        elif ! [[ -d $db_root ]]; then
            printf >&2 '%s: %s: not a directory\n' "$argv0" "$db_root"
            exit 20
        else
            contents() { bsdcat "$db_root/$db_name".db | db_namever; }
        fi
        ;;
    #requires
    # - [$db_name] (pacman.conf)
    sync)
        contents() { bsdcat "$pacman_dbpath/sync/$db_name".db | db_namever; }
        ;;
esac

case $mode in
    list_upgrades)
        contents | aur vercmp "${vercmp_args[@]}"
        ;;
    list_packages)
        contents
        ;;
    *)
        printf '%s\n' "$db_root/$db_name".db
        ;;
esac

# vim: set et sw=4 sts=4 ft=sh:
