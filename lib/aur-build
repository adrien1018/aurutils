#!/bin/bash
# aur-build - build packages to a local repository
[[ -v AUR_DEBUG ]] && set -o xtrace
set -o errexit
shopt -s extglob
readonly argv0=build
readonly startdir=$PWD
readonly XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-$HOME/.config}
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

# hardware name
machine=$(uname -m)
readonly machine

# default arguments
archbuild_args=()
chroot_prefix=aur
gpg_args=(--detach-sign --no-armor --batch)
makechrootpkg_args=()
makepkg_args=(--clean --syncdeps)
repo_add_args=()

# default options
chroot=0 no_sync=0 overwrite=0 sign_pkg=0 run_pkgver=0 results=0

conf_single() {
    pacman-conf --config "$1" | awk -v "repo=[$2]" '
    /^\[.*\]$/ {
        do_print = ($1 == "[options]" || $1 == repo)
    }
    do_print'
}

db_replaces() {
    bsdcat "$1" | awk '
    /%REPLACES%/ {
        while(NF != 0) { getline; print; }
    }'
}

trap_exit() {
    if [[ ! -v AUR_DEBUG ]]; then
        rm -rf "$tmp"
        # Only remove package directory if all files were moved (#593)
        rm -df "$var_tmp"
    else
        printf >&2 'AUR_DEBUG: %s: temporary files at %s\n' "$argv0" "$tmp"
        printf >&2 'AUR_DEBUG: %s: temporary files at %s\n' "$argv0" "$var_tmp"
    fi
}

usage() {
    plain 'usage: %s [-d repo] [-aCDMr path] [-cfNRXsv] [--] <makepkg args>' "$argv0" >&2
    exit 1
}

source /usr/share/makepkg/util/util.sh
source /usr/share/makepkg/util/message.sh
source /usr/share/makepkg/util/parseopts.sh

if [[ ! -v NO_COLOR ]] && [[ ! -v AUR_DEBUG ]]; then
    [[ -t 2 ]] && colorize
fi

# mollyguard for makepkg
if (( UID == 0 )) && [[ ! -v AUR_ASROOT ]]; then
    warning 'aur-%s is not meant to be run as root.' "$argv0"
    warning 'To proceed anyway, set the %s variable.' 'AUR_ASROOT'
    exit 1
fi

## option parsing
opt_short='a:B:d:D:AcfnrsvLNR'
opt_long=('arg-file:' 'chroot' 'database:' 'force' 'root:' 'sign'
          'verify' 'directory:' 'no-sync' 'pacman-conf:' 'results:'
          'makepkg-conf:' 'remove' 'build-command:' 'pkgver' 'prefix:'
          'rmdeps' 'noconfirm' 'ignorearch' 'log' 'recreate')
opt_hidden=('dump-options')

if ! parseopts "$opt_short" "${opt_long[@]}" "${opt_hidden[@]}" -- "$@"; then
    usage
fi
set -- "${OPTRET[@]}"

unset queue db_name db_path db_root build_cmd makepkg_conf pacman_conf results_file
while true; do
    case "$1" in
        # build options
        -a|--arg-file)      shift; queue=$1 ;;
        -B|--build-command) shift; build_cmd+=("$1") ;;
        --makepkg-conf)     shift; makepkg_conf=$1 ;;
        -f|--force)         overwrite=1 ;;
        # database options
        -d|--database)      shift; db_name=$1 ;;
        --root)             shift; db_root=$1 ;;
        --pacman-conf)      shift; pacman_conf=$1 ;;
        -N|--no-sync)       no_sync=1 ;;
        # chroot options
        -c|--chroot)        chroot=1 ;;
        -D|--directory)     shift; archbuild_args+=(-r "$1") ;;
        --prefix)           shift; chroot_prefix=$1 ;;
        --recreate)         archbuild_args+=(-c) ;;
        # common repo-add options
        -s|--sign)          sign_pkg=1
                            repo_add_args+=(-s) ;;
        -v|--verify)        repo_add_args+=(-v) ;;
        -R|--remove)        repo_add_args+=(-R) ;;
        # common makepkg options
        -r|--rmdeps)        makepkg_args+=(--rmdeps) ;;
        -n|--noconfirm)     makepkg_args+=(--noconfirm) ;;
        -A|--ignorearch)    makepkg_args+=(--ignorearch) ;;
        -L|--log)           makepkg_args+=(--log) ;;
        # other options
        --pkgver)           run_pkgver=1
                            makepkg_args+=(--holdver) ;;
        --results)          shift; results_file=$1 ;;
        --dump-options)
            printf -- '--%s\n' "${opt_long[@]}"
            printf -- '%s' "${opt_short}" | sed 's/.:\?/-&\n/g'
            exit ;;
        --) shift; break ;;
    esac
    shift
done

tmp=$(mktemp -d --tmpdir "aurutils-$argv0.XXXXXXXX") || exit
var_tmp=$(mktemp -d --tmpdir="${TMPDIR:-/var/tmp/}" "aurutils-$argv0.XXXXXXXX") || exit

trap 'trap_exit' EXIT
trap 'exit' INT

# makechrootpkg arguments can only be appended to the defaults
# specified in archbuild (-cn), unlike makepkg where we override our
# own set of defaults (-cs).
if (( $# )); then
    if (( chroot )); then
        makechrootpkg_args=("$@")
    else
        makepkg_args=("$@")
    fi
fi

# Assign environment variables (#443)
: "${db_name=$AUR_REPO}"
: "${db_root=$AUR_DBROOT}"

case $db_name in
    "")
        case $db_root in
            "") db_path=$(aur repo)
                db_name=$(basename "$db_path" .db)
                db_root=$(dirname "$db_path")
                ;;
             *) error '%s: root specified without database name' "$argv0"
                exit 1 ;;
        esac ;;
    *)
        case $db_root in
            "") db_path=$(aur repo -d "$db_name")
                db_name=$(basename "$db_path" .db)
                db_root=$(dirname "$db_path")
                ;;
             *) db_path=$db_root/$db_name.db
                ;;
        esac ;;
esac

# Resolve symbolic link to database
if ! db_path=$(readlink -e -- "$db_path"); then
    error '%s: %s: no such file or directory' "$argv0" "$db_path"
    exit 2
fi

if ! [[ -w $db_path ]]; then
    error '%s: %s: permission denied' "$argv0" "$db_path"
    exit 13
fi

# Provisions for symbolic links to /usr/bin/archbuild. Because archbuild
# only allows to pass bind mounts to makechrootpkg, and not arch-nspawn,
# the below relies on the implicit mounting of file:// repositories
# by arch-nspawn in devtools>=20190821. (#591)
if (( chroot )); then
    if ! type -P "$chroot_prefix"-"$machine"-build >/dev/null; then
        error '%s: %s: command not found' "$argv0" "$chroot_prefix"-"$machine"-build
        exit 1
    fi

    chroot_pacman_conf=/usr/share/devtools/pacman-$chroot_prefix.conf

    if ! [[ -e $chroot_pacman_conf ]]; then
        error '%s: pacman-%s.conf: no such file or directory' "$argv0" "$chroot_prefix"
        exit 2
    elif ! pacman-conf --config="$chroot_pacman_conf" --repo="$db_name" >/dev/null; then
        error '%s: %s: local repository %s not configured' "$argv0" "$chroot_pacman_conf" "$db_name"
        exit 1
    fi
fi


if [[ -v queue ]]; then
    exec {fd}< "$queue"
else
    exec {fd}< <(printf '\n')
fi

# Write successfully built packages to file (#437)
if [[ -v results_file ]]; then
    if [[ -w $results_file ]]; then
        results=1
    else
        error '%s: %s: permission denied' "$argv0" "$results_file"
        exit 13
    fi
fi

if (( sign_pkg )); then
    if [[ -v GPGKEY ]]; then
        gpg --list-keys "$GPGKEY"
        gpg_args+=(-u "$GPGKEY")
    fi
else
    db_sigs=("$db_root/$db_name".sig
             "$db_root/$db_name".files.sig)

    if [[ -f ${db_sigs[0]} ]]; then
        error '%s: database signature found, but signing is disabled' "$argv0"

        printf '%q\n' >&2 "${db_sigs[@]}"
        exit 1
    fi
fi

# Configuration for host builds.
conf_single "${pacman_conf:-/etc/pacman.conf}" "$db_name" >"$tmp"/custom.conf

# PKGDEST is defined below through makepkg.conf (#513)
unset PKGDEST

{ if [[ -v makepkg_conf ]]; then
      cat -s "$makepkg_conf"
  else
      # Write makepkg configuration in the order as parsed by makepkg
      cat -s /etc/makepkg.conf

      if [[ -r $XDG_CONFIG_HOME/pacman/makepkg.conf ]]; then
          cat -s "$XDG_CONFIG_HOME"/pacman/makepkg.conf
      elif [[ -r $HOME/.makepkg.conf ]]; then
          cat -s "$HOME"/.makepkg.conf
      fi
  fi

  # PKGDEST defined here is NOT exported to the build environment.
  # This is not a concern for container builds, as makechrootpkg
  # already has a similar mechanism for defining PKGDEST. (#498)
  printf "PKGDEST='%s'\\n" "$var_tmp"
} >"$tmp"/makepkg.conf

while IFS= read -ru "$fd" path; do
    cd_safe "$startdir/$path"

    # Run pkgver before --packagelist (#500)
    if (( run_pkgver )); then
        # Ignore architecture in pkgver() function (#536)
        makepkg --noprepare -od --ignorearch
    fi

    if (( ! overwrite )); then
        unset mark

        while IFS= read -r; do
            [[ -f $REPLY ]] && mark+=("$REPLY")
        done < <(PKGDEST="$db_root" makepkg --packagelist)

        if [[ ${mark[*]} ]]; then
            warning '%s: skipping built package (use -f to overwrite)' "$argv0"

            printf '%q\n' >&2 "${mark[@]}"
            continue
        fi
    fi

    if [[ -v build_cmd ]]; then
        printf '%s\n' >&2 "Running custom command: ${build_cmd[*]}"
        env PKGDEST="$var_tmp" AUR_REPO="$db_name" AUR_DBROOT="$db_root" "${build_cmd[@]}"
    elif (( chroot )); then
        printf '%s\n' >&2 "Running $chroot_prefix-$machine-build"
        env PKGDEST="$var_tmp" "$chroot_prefix"-"$machine"-build \
            "${archbuild_args[@]}" -- -d "$db_root" "${makechrootpkg_args[@]}"
    else
        printf '%s\n' >&2 "Running makepkg ${makepkg_args[*]}"
        makepkg --config "$tmp"/makepkg.conf "${makepkg_args[@]}"
    fi

    cd_safe "$var_tmp"
    pkglist=(!(*.sig)) # discard makepkg --sign from package list (#410)
    siglist=()

    # pkglist should not be empty (#513)
    if [[ ${pkglist[*]} == '!(*.sig)' ]]; then
        error '%s: invalid argument (no packages found)' "$argv0"
        exit 22
    fi

    for p in "${pkglist[@]}"; do
        if [[ -f $p.sig ]]; then
            warning '%s: existing package signature found' "$argv0"
            siglist+=("$p".sig)

        elif (( sign_pkg )); then
            gpg "${gpg_args[@]}" --output "$p".sig "$p"
            siglist+=("$p".sig)
        fi
    done

    # Move build products (relative paths)
    mv -f "${pkglist[@]}" "${siglist[@]}" "$db_root"

    # Update database
    cd_safe "$db_root"
    LANG=C repo-add "${repo_add_args[@]}" "$db_path" "${pkglist[@]}"

    if (( results )); then
        printf '%s\n' "${pkglist[@]}" | tee -a "$results_file"
    fi

    if (( chroot )) || (( no_sync )); then
        continue
    else
        replaces=$(grep -Fxf <(db_replaces "$db_path") <(pacman -Qq) | paste -s -d, -)

        sudo pacman -Syu --config="$tmp"/custom.conf --ignore="$replaces" --noconfirm
    fi
done
exec {fd}<&-

# Download file databases after the build (#594)
sudo pacman -Fy --config="$tmp"/custom.conf

# vim: set et sw=4 sts=4 ft=sh:
