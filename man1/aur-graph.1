.TH AUR-GRAPH 1 2020-11-08 AURUTILS
.SH NAME
aur\-graph \- print package/dependency directed graph
.
.SH SYNOPSIS
.SY "aur graph"
.RB [ .SRCINFO ...]
.YS
.
.SH DESCRIPTION
.B aur\-graph
prints out a partial ordering of packages (tab-seperated)
.RB ( pkgbase )
from
.B .SRCINFO
files provided on the command-line. If no files are specified, input
is taken from
.BR stdin .
.PP
To improve performance,
.B .SRCINFO
files may be concatenated before processing:
.PP
.EX
    $ cat */.SRCINFO | aur graph | tsort | tac
.EE
.
.SH OPTIONS
.SS Dependency options
When ordering packages,
.B aur\-graph
considers all types (
.IR depends ,
.IR makedepends ,
and
.IR checkdepends )
of dependencies by default. Types can be removed selectively with
the
.BR \-\-no\-depends ,
.BR \-\-no\-makedepends ,
and
.B \-\-no\-checkdepends
options. In particular, these options may be used to bypass cycles between dependencies of differing types.
.
.SH EXAMPLES
.B aur\-graph
supports
.B provides
and versioned dependencies. This can be used to verify output from
tools with no or limited support for such dependencies, for example
.BR aur\-depends (1):
.PP
.EX
    $ mkdir build; cd build
    $ aur depends <package> | xargs -d '\\n' aur fetch
    $ aur graph */.SRCINFO >/dev/null
.EE
.PP
.B aur\-graph
output is suitable as input for
.BR tsort (1),
provided no cycles are present. The resulting topologically ordered
list can be used to build packages in the correct order. For example:
.PP
.EX
    $ cd build
    $ aur graph */.SRCINFO | tsort | tac > deps.txt
    $ aur build -a deps.txt
.EE
.PP
.
.SH SEE ALSO
.ad l
.nh
.BR aur (1),
.BR aur\-build (1),
.BR aur\-depends (1),
.BR awk (1),
.BR tac (1),
.BR tsort (1)
.
.SH AUTHORS
.MT https://github.com/AladW
Alad Wenter
.ME
.
.\" vim: set textwidth=72:
