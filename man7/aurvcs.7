.TH AURVCS 7 2019-07-30 AURUTILS
.SH NAME
aurvcs \- manage development packages

.SH DESCRIPTION
Suggestions on how to manage development packages.


.SH EXAMPLE
.SS aur-vercmp-devel

Takes the results of
.B aur\-repo\~\-\-list\~\-\-devel
plus any
.BR aur-repo (1)
arguments specified in the command line,
and looks in the
.BR aur\-sync (1)
cache
.RB ( "find $AURDEST" )
for matching directories.

Any existing
.BR PKGBUILD (5)
files in these directories are executed, with upstream sources updated
to their latest revision.
.RB ( aur\-srcver (1)
using
.BR "makepkg\~-o" ).

.RS
.EX
#!/bin/bash
readonly XDG_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache}

tmp=$(mktemp -d)
trap 'rm -rf "$tmp"' EXIT

if cd "${AURDEST:-$XDG_CACHE_HOME/aurutils/sync}"; then
    aur repo --list --devel "$@" \\
        | tee "$tmp"/db \\
        | cut -f1 \\
        | xargs -r aur srcver >"$tmp"/new || exit

    if [[ -s $tmp/new ]]; then
       aur vercmp -p "$tmp"/new < "$tmp"/db
    fi
fi
.EE
.RE

Then, the resulting package versions
.RI ( "$tmp/new" )
are compared against the local repository
.RI ( "$tmp/db" ).
If the package version is newer, it is printed to stdout. This may be
combined with
.BR aur\-sync (1)
as follows:

.RS
.EX
$ mapfile -t packages < <(aur vercmp-devel | cut -d: -f1)
$ aur sync "${packages[@]}" --no-ver-shallow
.EE
.RE

Version-control packages typically have
.B pkgver
set to the upstream revision at the time of package submission, making
the AUR\-advertised version older than the latest version.

Here, the
.B --no-ver-shallow
option ignores the AUR information
.I only
for packages from standard input. Further arguments can be appended to
.BR aur\-sync (1),
such as
.I --upgrades
to update regular and VCS packages in one go.

.TP 2
.B Note on populating the cache:
As described, the above relies on already available
.BR PKGBUILD (5)
files. If the
.BR aur\-sync (1)
cache is sparse or the package has meanwhile been updated by the AUR
maintainer (for example, to indicate a new upstream source),
information reported by
.B aur\-vercmp-devel
may be incomplete.

The following mediates this by downloading all VCS packages in a local
repository anew, with all build files and their diffs offered for
inspection.

.RS 7
.EX
$ mapfile -t packages < <(aur repo --list --devel | cut -f1)
$ aur sync "${packages[@]}" --no-ver --print
.EE
.RE

.SH AUTHORS
.MT https://github.com/AladW
Alad Wenter
.ME

.\" vim: set textwidth=72:
